library(nlme, lib.loc = "C:/Program Files/R/R-4.1.1/library")
install.packages(c("vegan", "SPECIES"))
install.packages("ggridges")
install.packages(c("backports", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "DBI", "digest", "dplyr", "dtplyr", "fansi", "foreach", "fs", "generics", "glue", "gower", "iterators", "jsonlite", "knitr", "lme4", "lubridate", "magrittr", "nloptr", "openssl", "parallelly", "permute", "pillar", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rlang", "rvest", "sp", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
setwd("C:/Users/jargr/Dropbox/PC/Desktop/Anny Stats/Lab 5")
#Load packages
library(tidyverse)
library(car)
library(statmod)
#Load data
cholla<-read.csv("cholla_demography_corrected.csv")
cholla$Reproduced<-ifelse(cholla$Goodbuds_t>0, 1, 0)
View(cholla)
#plotting reproduction vs. size
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Volume in year t+1")
#plotting reproduction vs. size
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1")
#Plot log(vol) change from year to year
plot(x=cholla$logvol_t, y=cholla$logvol_t1,
xlab = "Volume in year t", ylab = "Volume in year t+1")
#Check assumptions
qqPlot(growth_model$residuals) #looks bad?
hist(growth_model$residuals) #actually not terrible
#Plot log(vol) change from year to year
plot(x=cholla$logvol_t, y=cholla$logvol_t1,
xlab = "Volume in year t", ylab = "Volume in year t+1")
#Do they grow or shrink? Add 1:1 line
abline(a=0, b=1) #a=intercept, b=slope
legend("topleft",bty="n",lty=1,legend=c("y=x"))
#1.2 Growth: Fit model---------------------------
#State model
growth_model <- lm(logvol_t1 ~ logvol_t, data = cholla)
#Fitted model results
summary(growth_model)
#1.3 Growth: Plot fitted model---------------------
plot(x=cholla$logvol_t, y=cholla$logvol_t1,
xlab = "Volume in year t", ylab = "Volume in year t+1")
#1.3 Growth: Plot fitted model---------------------
plot(x=cholla$logvol_t, y=cholla$logvol_t1,
xlab = "Volume in year t", ylab = "Volume in year t+1")
abline(coef(growth_model)[1],coef(growth_model)[2],col="red",lwd=3) #Fitted line
abline(a=0, b=1)
legend("topleft",bty="n",lty=1,col=c("black","red"),lwd=c(1,3),legend=c("y=x","fitted model"))
#2.1 Survival: Prelim visualization--------------------
#Try simple x-y plot
plot(cholla$Survival_t1 ~ cholla$logvol_t, xlab = "Volume in year t", ylab = "Survival in year t+1")
#Try binning by size and plotting mean survival for each size bin for easier visualization
surv_bin <- cholla %>%
mutate(size_bin = cut_interval(logvol_t, n=8)) %>% #Makes 8 size bins based on log(vol_t)
group_by(size_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_surv = mean(Survival_t1,na.rm=T)) #Mean survival in each bin
rep_bin <- cholla %>%
mutate(size_bin = cut_interval(logvol_t, n=8)) %>% #Makes 8 size bins based on log(vol_t)
group_by(size_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_surv = mean(Reproduced,na.rm=T)) #Mean survival in each bin
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=8)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_surv = mean(Reproduced,na.rm=T)) #Mean survival in each bin
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(surv_bin$mean_size, surv_bin$mean_surv, pch=16, cex=2)
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=8)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_rep = mean(Reproduced,na.rm=T)) #Mean survival in each bin
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(rep_bin$mean_size, surv_bin$mean_rep, pch=16, cex=2)
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=8)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_rep = mean(Reproduced,na.rm=T)) #Mean survival in each bin
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=8)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_rep = mean(Reproduced,na.rm=T)) #Mean survival in each bin
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(rep_bin$mean_size, rep_bin$mean_rep, pch=16, cex=2)
#Load data
cholla<-read.csv("cholla_demography_corrected.csv")
#creates reproduction variable that is binary
cholla$Reproduced <- ifelse(cholla$Goodbuds_t>0, 1, 0)
#creates reproduction variable that is binary
cholla$Reproduced <- ifelse(cholla$Goodbuds_t>0, 1, 0)
#plotting reproduction vs. size
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1")
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=8)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_rep = mean(Reproduced,na.rm=T)) #Mean survival in each bin
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(rep_bin$mean_size, rep_bin$mean_rep, pch=16, cex=2)
#plotting reproduction vs. size
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1")
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=10)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_rep = mean(Reproduced,na.rm=T)) #Mean survival in each bin
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(rep_bin$mean_size, rep_bin$mean_rep, pch=16, cex=2)
#glm
reprod_model <- glm(Reproduced ~ logvol_t, family = "binomial", data=cholla)
plot(reprod_model)
qres<-qresid(survival_model)#calculates quantilized residuals with some introduced randomization to overcome discreteness
qres<-qresid(reprod_model)#calculates quantilized residuals with some introduced randomization to overcome discreteness
qqnorm(qres)#make qqplot
qres<-qresid(reprod_model)#calculates quantilized residuals with some introduced randomization to overcome discreteness
qqnorm(qres)#make qqplot
qres<-qresid(reprod_model)#calculates quantilized residuals with some introduced randomization to overcome discreteness
qqnorm(qres)#make qqplot
abline(0,1)
qres<-qresid(reprod_model)#calculates quantilized residuals with some introduced randomization to overcome discreteness
qqnorm(qres)#make qqplot
abline(0,1)
#Check for constant dispersion by eye
scatter.smooth(qres~fitted(survival_model))
#2.2 Survival: fit model----------------------------
#use glm with family=binomial (because bernoulli is special case of binomial)
#check out glm help and list of families, also binomial documentation
survival_model <- glm(Survival_t1 ~ logvol_t, family = "binomial", data=cholla)
#Check model assumptions
#Try our usual method
plot(survival_model)
#Check for constant dispersion by eye
scatter.smooth(qres~fitted(survival_model))
#Check for constant dispersion by eye
scatter.smooth(qres~fitted(survival_model))
#Check for overdispersion using stats
resid.ssq <- sum(residuals(survival_model,type="pearson")^2)
resid.df <- nrow(subset(cholla,!is.na(logvol_t) & !is.na(Survival_t1)))-length(coef(survival_model))
resid.ssq/resid.df
resid.ssq <- sum(residuals(reprod_model,type="pearson")^2)
resid.df <- nrow(subset(cholla,!is.na(logvol_t) & !is.na(Reproduced)))-length(coef(reprod_model))
resid.ssq/resid.df
qres<-qresid(reprod_model)#calculates quantilized residuals with some introduced randomization to overcome discreteness
qqnorm(qres)#make qqplot
abline(0,1)
resid.ssq <- sum(residuals(reprod_model,type="pearson")^2)
resid.df <- nrow(subset(cholla,!is.na(logvol_t) & !is.na(Reproduced)))-length(coef(reprod_model))
resid.ssq/resid.df #overdispersion!!!
#plot data as before
plot(cholla$Survival_t1 ~ cholla$logvol_t, xlab = "Volume in year t", ylab = "Survival in year t+1", col="gray")
points(surv_bin$mean_size, surv_bin$mean_surv, pch=16, cex=2)
#add predicted model using our function
#First make dummy x variable across range of sizes
x_dummy <- seq(min(cholla$logvol_t,na.rm=T),max(cholla$logvol_t,na.rm=T),0.1)
#add predicted line using dummy x
lines(x_dummy,invlogit(coef(survival_model)[1]+coef(survival_model)[2]*x_dummy),col="red",lwd=3)
#or you can do it by calling $family$linkinv from the model
lines(x_dummy,survival_model$family$linkinv(coef(survival_model)[1]+coef(survival_model)[2]*x_dummy),col="blue",lty=2,lwd=3)
x_dum <- seq(min(cholla$logvol_t,na.rm=T),max(cholla$logvol_t,na.rm=T),0.1)
lines(x_dummy,invlogit(coef(reprod_model)[1]+coef(rerpod_model)[2]*x_dummy),col="red",lwd=3)
invlogit <- function(x){exp(x)/(1+exp(x))}
x_dum <- seq(min(cholla$logvol_t,na.rm=T),max(cholla$logvol_t,na.rm=T),0.1)
lines(x_dummy,invlogit(coef(reprod_model)[1]+coef(rerpod_model)[2]*x_dummy),col="red",lwd=3)
invlogit <- function(x){exp(x)/(1+exp(x))}
x_dum <- seq(min(cholla$logvol_t,na.rm=T),max(cholla$logvol_t,na.rm=T),0.1)
lines(x_dummy,invlogit(coef(reprod_model)[1]+coef(reprod_model)[2]*x_dummy),col="red",lwd=3)
setwd("C:/Users/jargr/Dropbox/PC/Desktop/Anny Stats/Lab 5")
#Load packages
library(tidyverse)
library(car)
library(statmod)
#Load data
cholla<-read.csv("cholla_demography_corrected.csv")
#creates reproduction variable that is binary
cholla$Reproduced <- ifelse(cholla$Goodbuds_t>0, 1, 0)
#plotting reproduction vs. size
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1")
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=10)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_rep = mean(Reproduced,na.rm=T)) #Mean reproduction in each bin
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(rep_bin$mean_size, rep_bin$mean_rep, pch=16, cex=2)
#glm
reprod_model <- glm(Reproduced ~ logvol_t, family = "binomial", data=cholla)
plot(reprod_model)
resid.df <- nrow(subset(cholla,!is.na(logvol_t) & !is.na(Reproduced)))-length(coef(reprod_model))
resid.ssq/resid.df #overdispersion!!!
invlogit <- function(x){exp(x)/(1+exp(x))}
x_dum <- seq(min(cholla$logvol_t,na.rm=T),max(cholla$logvol_t,na.rm=T),0.1)
lines(x_dummy,invlogit(coef(reprod_model)[1]+coef(reprod_model)[2]*x_dummy),col="red",lwd=3)
x_dum <- seq(min(cholla$logvol_t,na.rm=T),max(cholla$logvol_t,na.rm=T),0.1)
lines(x_dummy,invlogit(coef(reprod_model)[1]+coef(reprod_model)[2]*x_dummy),col="red",lwd=3)
#glm
reprod_model <- glm(Reproduced ~ logvol_t, family = "binomial", data=cholla)
plot(reprod_model)
resid.df <- nrow(subset(cholla,!is.na(logvol_t) & !is.na(Reproduced)))-length(coef(reprod_model))
#plotting reproduction vs. size
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1")
rep_bin <- cholla %>%
mutate(rep_bin = cut_interval(logvol_t, n=10)) %>% #Makes 8 size bins based on log(vol_t)
group_by(rep_bin) %>%
summarise(mean_size = mean(logvol_t,na.rm=T), #Mean size in each bin
mean_rep = mean(Reproduced,na.rm=T)) #Mean reproduction in each bin
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(rep_bin$mean_size, rep_bin$mean_rep, pch=16, cex=2)
#glm
reprod_model <- glm(Reproduced ~ logvol_t, family = "binomial", data=cholla)
plot(reprod_model)
points(rep_bin$mean_size, rep_bin$mean_rep, pch=16, cex=2)
plot(x=cholla$logvol_t, y=cholla$Reproduced,
xlab = "Volume in year t", ylab = "Reproduced in t+1", col = "grey")
points(rep_bin$mean_size, rep_bin$mean_rep, pch=16, cex=2)
invlogit <- function(x){exp(x)/(1+exp(x))}
x_dummy <- seq(min(cholla$logvol_t,na.rm=T),max(cholla$logvol_t,na.rm=T),0.1)
#add predicted line using dummy x
lines(x_dummy,invlogit(coef(reprod_model)[1]+coef(reprod_model)[2]*x_dummy),col="blue",lwd=3)
summary(reprod_model)
plot(reprod_model)
qres<-qresid(reprod_model)#calculates quantilized residuals with some introduced randomization to overcome discreteness
qqnorm(qres)#make qqplot
abline(0,1)
scatter.smooth(qres~fitted(reprod_model))
