library(nlme, lib.loc = "C:/Program Files/R/R-4.1.1/library")
install.packages(c("vegan", "SPECIES"))
install.packages("ggridges")
install.packages(c("backports", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "DBI", "digest", "dplyr", "dtplyr", "fansi", "foreach", "fs", "generics", "glue", "gower", "iterators", "jsonlite", "knitr", "lme4", "lubridate", "magrittr", "nloptr", "openssl", "parallelly", "permute", "pillar", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rlang", "rvest", "sp", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
update(R)
if(!require(installr)) {
install.packages("installr");
require(installr)
update(R)
(!require(installr))
install.packages("installr");
require(installr)
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages("rmarkdown")
install.packages("rmarkdown")
library(emmeans)
#First attempt at ggridges
#------------------------------------------------------------------------------
setwd("C:/Users/jargr/Desktop/Parasitic Plants/R_Work")
#remove.packages("rlang")
#install.packages("rlang")
library(metagear)
library(tidyverse)
install.packages("cli")
install.packages("cli")
library(tidyverse)
#remove.packages("rlang")
#install.packages("rlang")
library(metagear)
library(metagear)
setwd("C:/Users/jargr/Dropbox/PC/Desktop/Data Analysis/RMBL/2023 Argrett")
# Load-in packages
library(tidyverse) # for data working
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car) # Regression Analysis
moisture <- read.csv("Emerald Lake Soil Moisture Data.csv")
View(moisture)
#checking data structure
str(moisture)
# Looking at average moisture by date per plot
ggplot(moisture, aes(x=Date, y=Average.Soil.Moisture, fill = Plot))
moisture$Date <- as.factor(moisture$Date)
# Looking at average moisture by date per plot
ggplot(moisture, aes(x=Date, y=Average.Soil.Moisture, fill = Plot))
# Looking at average moisture by date per plot
ggplot(moisture, aes(x=Plot, y=Average.Soil.Moisture, fill = Plot))
is.na(moisture)
na.omit(moisture)
# Looking at average moisture by date per plot
ggplot(moisture, aes(x=Plot, y=Average.Soil.Moisture, fill = Plot))
# Looking at average moisture by date per plot
ggplot(moisture, aes(x=Plot, y=Average.Soil.Moisture, fill = Plot))
View(moisture)
is.na(moisture)
na.omit(moisture)
moisture <- na.omit(moisture)
SM <- na.omit(moisture)
View(SM)
#Data Visualizations
plot(SM$Date~SM$Average.Soil.Moisture)
#Data Visualizations
scatterplot(Date~Average.Soil.Moisture)
#Data Visualizations
scatterplot(Date~Average.Soil.Moisture, data = SM)
View(SM)
SM %>%
group_by(Date) %>%
summarise_at(vars(Average.Soil.Moisture), list(name = mean))
SM %>%
group_by(Date) %>%
summarise_at(vars(Average.Soil.Moisture), list(ASM = mean))
is.na(SM)
aggregate(SM$Average.Soil.Moisture, list(df$Plot), FUN=mean)
#Create a new DF that groups by averages per plot
SM %>%
group_by(Plot) %>%
summarise_at(vars(Average.Soil.Moisture), list(name = mean))
#Create a new DF that groups by averages per plot
SM %>%
group_by(Plot) %>%
mutate(mean(Average.Soil.Moisture, na.rm = TRUE))
setwd("C:/Users/jargr/Dropbox/PC/Desktop/Data Analysis/RMBL/2023 Argrett")
# Load-in packages
library(tidyverse) # for data working
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car) # Regression Analysis
soil.moisture <- read.csv("Emerald Lake Soil Moisture Data.csv")
#checking data structure
str(soil.moisture)
soil.moisture$Date <- as.factor(soil.moisture$Date)
is.na(moisture)
moisture <- na.omit(soil.moisture)
is.na(soi.moisture)
is.na(soil.moisture)
moisture <- na.omit(soil.moisture)
is.na(SM)
#Create a new DF that groups by averages per plot
SM <- moisture %>%
group_by(Plot) %>%
mutate(mean(Average.Soil.Moisture, na.rm = TRUE))
View(SM)
#Create a new DF that groups by averages per plot
SM <- moisture %>%
group_by(Plot) %>%
mutate(mean(Average.Soil.Moisture))
View(SM)
setwd("C:/Users/jargr/Dropbox/PC/Desktop/Data Analysis/RMBL/2023 Argrett")
# Load-in packages
library(tidyverse) # for data working
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car) # Regression Analysis
soil.moisture <- read.csv("Emerald Lake Soil Moisture Data.csv")
#checking data structure
str(soil.moisture)
soil.moisture$Date <- as.factor(soil.moisture$Date)
is.na(soil.moisture)
moisture <- na.omit(soil.moisture)
#Create a new DF that groups by averages per plot
SM <- moisture %>%
group_by(Plot) %>%
summarize(ASM=mean(Average.Soil.Moisture))
View(SM)
View(SM)
#checking data structure
str(soil.moisture)
soil.moisture$Average.Soil.Moisture <- as.numeric(soil.moisture$Average.Soil.Moisture)
is.na(soil.moisture)
moisture <- na.omit(soil.moisture)
#Create a new DF that groups by averages per plot
SM <- moisture %>%
group_by(Plot) %>%
summarize(ASM=mean(Average.Soil.Moisture))
View(SM)
View(SM)
#Create a new DF that groups by averages per plot
ASM <- moisture %>%
group_by(Plot) %>%
summarize(ASM=mean(Average.Soil.Moisture))
SM <- merge(ASM,moisture,by="Plot")
View(SM)
SM <- merge(moisture,ASM,by="Plot")
View(SM)
#Create a new DF that groups by averages per plot
ASM.Plot <- moisture %>%
group_by(Plot) %>%
summarize(ASM=mean(Average.Soil.Moisture))
SM <- merge(moisture,ASM.Plot,by="Plot")
View(SM)
str(SM)
View(SM)
View(ASM.Plot)
View(ASM.Plot)
#Data Visualizations
scatterplot(Date~Average.Soil.Moisture,data = SM)
View(SM)
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, Fill = Plot)) +
geom_point()
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, Color = Plot)) +
geom_line()
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, Fill = Plot)) +
geom_line()
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, shape = Plot)) +
geom_plot()
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, shape = Plot)) +
geom_point()
soil.moisture$Plot <- as.factor(soil.moisture$Plot)
#checking data structure
str(soil.moisture)
soil.moisture$Average.Soil.Moisture <- as.numeric(soil.moisture$Average.Soil.Moisture)
soil.moisture$Date <- as.factor(soil.moisture$Date)
soil.moisture$Plot <- as.factor(soil.moisture$Plot)
is.na(soil.moisture)
#Create a new DF that groups by averages per plot
ASM.Plot <- moisture %>%
group_by(Plot) %>%
summarize(ASM=mean(Average.Soil.Moisture))
SM <- merge(moisture,ASM.Plot,by="Plot")
str(SM)
SM$Plot <- as.factor(SM$Plot)
str(SM)
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, shape = Plot)) +
geom_point()
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, Fill = Plot)) +
geom_point()
#Data Visualizations
ggplot(SM, aes(x=Date, y=Average.Soil.Moisture, fill = Plot)) +
geom_point()
#Data Visualizations
ggplot(SM, aes(x=Plot, y=Average.Soil.Moisture)) +
geom_point()
#Data Visualizations
ggplot(ASM.Plot, aes(x=Plot, y=Average.Soil.Moisture)) +
geom_point()
View(ASM)
View(ASM.Plot)
#Data Visualizations
ggplot(ASM.Plot, aes(x=Plot, y=ASM)) +
geom_point()
#Data Visualizations
ggplot(SM, aes(x=Date, y=ASM)) +
geom_point()
#Data Visualizations
ggplot(SM, aes(x=Plot, y=ASM)) +
geom_point()
#Data Visualizations
EL <- read.csv("Emerald Lake Plot Data.csv")
View(EL)
View(EL)
#Data Visualizations
EL <- read.csv("Emerald Lake Plot Data.csv")
ggplot(EL, aes(x=Block, y=Soil.Moisture.2023)) +
geom_point()
ggplot(EL, aes(x=Disturbance.Type, y=Soil.Moisture.2023)) +
geom_point()
ggplot(EL, aes(x=Disturbance.Type, y=Soil.Moisture.2023)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
ggplot(EL, aes(x=Plot, y=Soil.Moisture.2023)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
ggplot(EL, aes(x=Blook, y=Soil.Moisture.2023)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
ggplot(EL, aes(x=Block, y=Soil.Moisture.2023)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
ggplot(EL, aes(x=Block, y=Soil.Moisture.2023)) +
geom_point() +
geom_smooth(method=lm, se=TRUE)
sm.lm <- lm(Soil.Moisture.2023~Block*Elevation, data = EL)
summary(sm.lm)
Anova(sm.lm)
#setwd
setwd("C:/Users/jargr/Dropbox/PC/Desktop/Data Analysis/RMBL/2023 Argrett")
setwd("/Users/jargrett/Desktop/Castilleja/Data Analysis/RMBL/2023 Argrett")
#setwd
setwd("/Users/jargrett/Desktop/Castilleja/Data Analysis/RMBL/2023 Argrett")
library(tidyverse) # for data working
library(vegan) # for diversity
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car) # linear regression
library(labdsv)
#import EL and SP Data
EL <- read.csv("Emerald Lake Plant Data.csv")
SP <- read.csv("Schofield Park Plant Data.csv")
#Emerald Lake
EL.post <- EL[EL$Collection.Point == 'Post',]
EL.matrix <- subset(EL.post, select = c('Code','Plot','Cover'))
EL.matrix <- matrify(EL.matrix)
EL.matrix$Average.cover <-apply(EL.matrix,1,mean)
EL.average <- subset(EL.matrix, select = c(41))
#
SP.post <- SP[SP$Collection.Point == 'Post',]
SP.matrix <- subset(SP.post, select = c('Code','Plot','Cover'))
SP.matrix <- matrify(SP.matrix)
SP.matrix$Average.cover <-apply(SP.matrix,1,mean)
SP.average <- subset(SP.matrix, select = c(41))
View(SP.average)
View(EL.average)
View(ASM)
setwd("/Users/jargrett/Desktop/Castilleja/Data Analysis/RMBL/2023 Argrett")
# Load-in packages
library(tidyverse) # for data working
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car) # Regression Analysis
soil.moisture <- read.csv("Emerald Lake Soil Moisture Data.csv")
#checking data structure
str(soil.moisture)
soil.moisture$Average.Soil.Moisture <- as.numeric(soil.moisture$Average.Soil.Moisture)
soil.moisture$Date <- as.factor(soil.moisture$Date)
is.na(soil.moisture)
moisture <- na.omit(soil.moisture)
#Create a new DF that groups by averages per plot
ASM.Plot <- moisture %>%
group_by(Plot) %>%
summarize(ASM=mean(Average.Soil.Moisture))
SM <- merge(moisture,ASM.Plot,by="Plot")
str(SM)
SM$Plot <- as.factor(SM$Plot)
#Data Visualizations
EL <- read.csv("Emerald Lake Plot Data.csv")
ggplot(EL, aes(x=Block, y=Soil.Moisture.2023)) +
geom_point() +
geom_smooth(method=lm, se=TRUE)
#linear regression and ANOVA to to see if Block and Elevation effect SM
sm.lm <- lm(Soil.Moisture.2023~Block*Elevation, data = EL)
summary(sm.lm)
Anova(sm.lm)
# Set working directory
setwd("/Users/jargrett/Desktop/Castilleja/Data Analysis/RMBL/2023 Argrett")
# Load-in packages
library(tidyverse) # for data working
library(vegan) # for diversity
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car)
library(ggpubr)
library(emmeans) # for comparison of means
library(rstatix) # for comparison of means
library(labdsv)
# Loading in data
plants <- read.csv("Pre Treatment Plant Data.csv")
# Set working directory
setwd("/Users/jargrett/Desktop/Castilleja/Data Analysis/RMBL/2023 Argrett")
# Load-in packages
library(tidyverse) # for data working
library(vegan) # for diversity
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car)
library(ggpubr)
library(emmeans) # for comparison of means
library(rstatix) # for comparison of means
library(labdsv)
# Loading in data
plants <- read.csv("Pre Treatment Plant Data.csv")
#-----------------Checking data structure-----------------#
str(plants)
plants$Code <- as.factor(plants$Code)
plants$Functional.Group <- as.factor(plants$Functional.Group)
plants$Block <- as.factor(plants$Block)
plants$Removal <- as.factor(plants$Removal)
plants$Life.History <- as.factor(plants$Life.History)
#------------Diversity Analysis------------#
# here we will be working with the count column
# we will need to conververt data to a matrix format
plant.c <- subset(plants, select = c('Plot','Code','Count'))
plant.count<- matrify(plant.c)
# Calculating the species richness for plots
pre.rich <- specnumber(plant.count)
# Calculating Shannon diversity for plots
pre.div <- diversity(plant.count, index = "shannon")
#combined data set with Plot Data File and calculated values
plot.data <- read.csv("Plot Data.csv") #importing metadata
p.data <- plot.data %>% select_if(~ !any(is.na(.))) #removing NA Columns
plant.div <- cbind(p.data, pre.rich, pre.div) #final datset
#Run some models
pre.rich.glm <- glm(pre.rich ~ Block*Elevation, family="poisson", data = plant.div)
hist(pre.rich.glm$residuals) #pretty normal
plot(pre.rich.glm)#seems okay
# We can get a summary of the model:
summary(pre.rich.glm)
#Run some models
pre.rich.glm <- glm(pre.rich ~ Block*Elevation, family="poisson", data = plant.div)
plant.div <- cbind(p.data, pre.rich, pre.div) #final datset
p.data <- plot.data %>% select_if(~ !any(is.na(.))) #removing NA Columns
#combined data set with Plot Data File and calculated values
plot.data <- read.csv("Plot Data.csv") #importing metadata
#combined data set with Plot Data File and calculated values
plot.data <- read.csv("Emerald Lake Plot Data.csv") #importing metadata
p.data <- plot.data %>% select_if(~ !any(is.na(.))) #removing NA Columns
plant.div <- cbind(p.data, pre.rich, pre.div) #final datset
#Run some models
pre.rich.glm <- glm(pre.rich ~ Block*Elevation, family="poisson", data = plant.div)
hist(pre.rich.glm$residuals) #pretty normal
plot(pre.rich.glm)#seems okay
labs(x = "Elevation", y = "Species Richness") +
theme_bw()
pre.rich.plot
pre.rich.plot <- ggplot(plant.div, aes(x = Elevation, y = pre.rich)) +
geom_point() +
labs(x = "Elevation", y = "Species Richness") +
theme_bw()
pre.rich.plot
# We can get a summary of the model:
summary(pre.rich.glm)
ggplot(plant.div, aes(x = Elevation, y = pre.rich)) +
geom_point() +
labs(x = "Elevation", y = "Species Richness") +
theme_bw()
table(plants$Disturbance.Type)
table(plants$Block)
# how is cover affected by elevation and disturbance?
# to subset =subset(myData, Code =="CASE")
m <- lm(percent.cover~Block*Elevation, data = plants)
summary(m)
plot.species.cover<-ggplot(plants[plants$Code %in% "HEQU" ], aes(x=Elevation, y=percent.cover)) +
geom_point() +
geom_smooth(method=lm)
plot.species.cover
plot.species.cover<-ggplot(plants[plants$Code %in% "HEQU" ], aes(x=Elevation, y=percent.cover)) +
geom_point() +
geom_smooth(method=lm)
View(plants)
plot.species.cover<-ggplot(plants, aes(x=Block, y=percent.cover)) +
geom_boxplot() +
geom_smooth(method=lm)
plot.species.cover
