library(nlme, lib.loc = "C:/Program Files/R/R-4.1.1/library")
install.packages(c("vegan", "SPECIES"))
install.packages("ggridges")
install.packages(c("backports", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "DBI", "digest", "dplyr", "dtplyr", "fansi", "foreach", "fs", "generics", "glue", "gower", "iterators", "jsonlite", "knitr", "lme4", "lubridate", "magrittr", "nloptr", "openssl", "parallelly", "permute", "pillar", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rlang", "rvest", "sp", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
update(R)
if(!require(installr)) {
install.packages("installr");
require(installr)
update(R)
(!require(installr))
install.packages("installr");
require(installr)
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "broom", "caret", "cli", "clipr", "colorspace", "conquer", "crayon", "datawizard", "desc", "dplyr", "emmeans", "evaluate", "fansi", "future", "glue", "haven", "insight", "jsonlite", "knitr", "lme4", "magrittr", "maptools", "mathjaxr", "nlme", "openssl", "parallelly", "performance", "plyr", "polynom", "processx", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readxl", "recipes", "reshape", "rlang", "rmarkdown", "rprojroot", "scales", "see", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "waldo", "withr", "xfun", "yaml"))
install.packages("rmarkdown")
install.packages("rmarkdown")
library(emmeans)
#First attempt at ggridges
#------------------------------------------------------------------------------
setwd("C:/Users/jargr/Desktop/Parasitic Plants/R_Work")
#remove.packages("rlang")
#install.packages("rlang")
library(metagear)
library(tidyverse)
install.packages("cli")
install.packages("cli")
library(tidyverse)
#remove.packages("rlang")
#install.packages("rlang")
library(metagear)
library(metagear)
aggregate(div ~ Treatment,
data = dc.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
# Species Diversity
setwd("C:/Users/jargr/Dropbox/PC/Desktop/Data Analysis/RMBL/Makena Data")
library(tidyverse) # for data working
library(vegan) # for diversity
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car)
deer.creek.cover <- read.csv("Combined deer creek data - Cover.csv")
dc.env <- subset(deer.creek.cover, select=c(2,4,5,6)) # holding our environmental stuff
dc.cover <- deer.creek.cover[ -c(1:7,27,28)]
dc.cover.nobg <- deer.creek.cover[ -c(1:7,27,28)] #remove bare ground and annuals
dc.cover.nobg[is.na(dc.cover.nobg)] <- 0
# Calculating Shannon diversity for plots using cover data
rich <- specnumber(dc.cover.nobg)
div <- diversity(dc.cover.nobg, index = "shannon")
even <- diversity(dc.cover.nobg, index = "shannon") / log(specnumber(dc.cover.nobg))
dc.div <- cbind(dc.env,rich,div,even)
#---------Analysis of the effect of treatment on diversity--------#
#Linear model -> Anova Type II
div.lm <- lm(div ~ Treatment*Pair, data = dc.div)
summary(div.lm)
Anova(div.lm)
aggregate(div ~ Treatment,
data = dc.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(div ~ Treatment,
data = dc.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(rich ~ Treatment,
data = dc.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(even ~ Treatment,
data = dc.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
library(tidyverse) # for data working
library(vegan) # for diversity
library(ggplot2) # plotting
library(ggpubr) # plotting
library(car)
case.cover <- read.csv("Combined septentrionalis plant data - Cover.csv")
case.env <- subset(case.cover, select=c(2,4,5,6)) # holding our environmental stuff
case.cover.nobg <- case.cover[-c(1:7)] #remove bare ground and annuals
case.cover.nobg[is.na(case.cover.nobg)] <- 0
rich <- specnumber(case.cover.nobg)
div <- diversity(case.cover.nobg, index = "shannon")
even <- diversity(case.cover.nobg, index = "shannon") / log(specnumber(case.cover.nobg))
case.div <- cbind(case.env,rich,div,even)
case.div$Pair <- as.factor(case.div$Pair)
aggregate(div ~ Treatment,
data = dc.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(div ~ Treatment,
data = case.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(rich ~ Treatment,
data = case.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(even ~ Treatment,
data = case.div,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(div ~ Treatment,
data = case.div,
function(x) round(c(mean = mean(x), se = se(x)), 2)
)
